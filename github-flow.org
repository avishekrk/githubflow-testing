#+Title:     Github Flow
#+Author:    Adolfo De Unánue
#+Email:     @nano_unanue
#+DATE:      Data Science for Social Good 2016
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+PROPERTY: header-args    :cache yes
#+PROPERTY: header-args:sh :results output :exports both :tangle no
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 2
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Github Flow"/>
#+REVEAL_POSTAMBLE: <p> Creada por Adolfo De Unánue. </p>
#+REVEAL_PLUGINS: (markdown notes zoom highlight search classList)
#+REVEAL_EXTRA_CSS: css/githubflow.css


** Bambalinas                                                      :noexport:

#+begin_src sh :var TANGLED=(org-babel-tangle)
  wc $TANGLED
#+end_src


* Agenda

- Some thoughts about  life

- First things first

- Different ways of do stuff

- "The Flow"

- "Issue oriented coding"

- Practice makes the master

* Some thoughts about  life

** Git is a collaboration tool

** Git is a communication tool

** The first golden Rule

 - You are a team, work as a team

 - You are physically located in the same table, so talk with your teammate

 - Know what he/she doing, Collaborate, Code review (and learn), Pair programming (and learn)

* First things first

- Open a terminal ...

- Command line magic

- Who am I? Where am I?

- ~git~ ~<>~ ~github~

- Try ~zsh~ or ~oh-my-zsh~

** My workspace

#+begin_src sh :eval never
   # How my git configuration looks like?
   git config --list
#+end_src

** My workspace

 #+begin_src sh :eval never
   # Adding some, if you don't have a user.name or user.email set
   git config --global user.name myusername
 #+end_src

** My workspace

 #+begin_src sh :eval never
   ## This is very important!!
   ## YOU NEED TO DO THIS
   git config --global push.default current
 #+end_src



* Different ways of do things

** Different ways of do things

- "Solo" workflow
- Open source workflow
- Git flow
- Github flow

** "Solo" workflow

#+begin_src sh :eval never
  mkdir my_working_directory
  cd my_working_directory
  git init
  touch some_file.py
  # hack
  # hack
  git add some_file.py
  git commit -m "Working with some awesome idea"
  # hack
  # more hack
  ...
#+end_src


** "Solo" workflow

- This works if you are working by yourself
  - This is not our case

** Opensource workflow

Some differences:

- You need a ~github~  account
- Choose a repository in ~github.com~ in which you want to participate
  - Lets pretend: ~http://github.com/the-repo-you-want-to-participate~
- Push the ~Fork~  button

** Opensource workflow

-  Open your terminal ...

#+begin_src sh :eval never
  git clone http://github.com/my-copy-of-the-repo-you-want-to-participate
  cd the-repo-you-want-to-participate
  # hack
  # hack
  git add some_file.py
  git commit -m "Working with some awesome idea"
  # hack
  # hack
  git push
#+end_src

** Opensource workflow

- Create a ~pull-request~ and describe your work

- Wait

** Opensource workflow

- This works very well if you want to collaborate, but you don't know the other people involved
  - This is not our case
- And this has several more steps:
  - What if I want to ~pull~ the most recent changes in the original repo?

#+begin_src sh :eval never
  ## See the "remotes"
  git remote -v
  ## Add the original repo
  git remote add original-repo http://github.com/the-repo-you-want-to-participate
  ## Pull the changes of the original repo to your local copy
  git pull original-repo master
  ## Push the added changes to your repo
  git push origin master
  ## etc
#+end_src

- More prone to errors, merges, conflicts, etc.

** Git flow

 - This is more oriented to software development with a lot of ~git~-gurus involved

* "The Flow"

** Github flow

- Also know as the [[http://endoflineblog.com/gitflow-considered-harmful][/Anti-gitflow/]]

- [[https://guides.github.com/introduction/flow/][Github Flow]] (explained with images and animation!)


* "Issue oriented coding"

** The second golden rule

You don't code anything if there is not a need of doing it


* About code reviewing

** DEMO

* Into "the flow"

** Github flow

- Short-lived branches

#+begin_src sh :eval never
  ## Pull from the repo
  git pull
  ## Decide what do you want to do and create an issue
  git checkout -b a-meaningful-name
  ## hack, hack, hack, add/rm, commit
  ## Push to the repo and create a remote branch
  git push
  ## Create a pull-request and describe your work
  ## Suggest/add a reviewer
  ## Code review
  ## The pull-request is closed and the remote branch is destroyed
  ## Switch to master locally
  git checkout master
  ## Destroy your local branch
  git branch -D a-meaningful-name
  ## Pull the most recent changes (including yours)
  git pull
#+end_src


* Practice makes the master

- Goal: Simulate the creation of a pipeline
- Create a directory called: ~test~
- The pipeline is composed for 3 steps:
  - They have a function called ~do_stuff()~ (no args)
  - This function prints on the screen ~I'm step X~,
- There's a ~master.py~ that uses that 3 steps in order.
- Easy right?
